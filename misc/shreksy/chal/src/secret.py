import os

FLAG = os.getenv("FLAG") or "TUDCTF{FAKE_FLAG}"

d = 0x1C45FCBBC8A88CFE8E6537CC5D041A5FEE7E6BFEB76F7E8CFD4026F07DD474E6572AF522D46017F2B6938F1A570C20AB735296C048D9A7247C79FE6256AFFFABFA8D6284589FFD7329AF71204815918919ECBDDF144707B014588E02007A42F7A1DF2910C9A128431CCC44D6FE1B46534DCDC027601F805697630D6D6A37E40A493ED19E03F9A4ACFA068660580F3F4329ED06FB0170C0F19F1DB5C7FC8E58CA670B7037888CC9824950C4D25BCD4E936EDF8DE93B18C5F57FE305835E755C461B11393EAEADD79C701262E0461D77B6601DDC6FB4FC04A3D424ADAE87E261EBC9B604BFFB7A7357E307E4FEE1E21E1CC0973EA3B1D130C515DDCC294BE0174D
n = 0x8D5DEFAAEB4AC0F8C7FA16FDD11483DFA8781BF9952D78C0F240C2B27526487FB3D6C9AE25E077BD90E1CB83B33CA359409CF1C16C4043B66E61F7EBB16FFE5BE4C2EC95BB1FF33FD06D35A1686BD7AD819FB55B6563267065BAC60A02634ED6295BCD53F025C94F8FFD5832F6885FA08504C0C4E09D81B0F4EF432313177434F23091FF642E15FBDF99464926F696E95108258A82FE5C6F7CE149E892B02AC797EA5705C1A6517CF7B80E835BD91AB6A1110917318BB7972AE6D6092D82805C6DFB3CDD1BDC0B871C367C165F9076F9ABEEAD790E4BCC778EE7897BFF9228E073FC9F0391C0EED9E61815BFEB57608B0E7C3909B74358DBB7D962042B5BB3BD
e = 5
p = 0x9C0C9C866683894CED0E06A90D43B77DA489BB60E2E08354FE2B6C87C95DB3F07A09AFF5A84BE41246556DADEFE6C618EBFB4DA09A0FA23DB506703D6D68EED12D7A497846673393F2754B1DF362982F9308E77BB4925990697F370E980CAD3CB30B6E8944D65AF96E2BA7E1317D7F6F818450ED75191F229EEC37067520E7E1
q = 0xE7E9DD62E9CA554E106A9FBE6166A31BDADD474298EA146263215078DA8ABAE31AA775FA6E9A7DDF42CEC8B9A0EFCBBC8AB7F5E87000378DF6714A3AE7CEC42CB92AD52B6C0FA1E4F96542970D9A883A385077CED0CD5BB400B0EE04C0199208D06318BA6386532908C4F4E4506F4A8BCA03AEE9C91445DFAB982E2F3ADA575D

from Crypto.Util.number import long_to_bytes, bytes_to_long


def decrypt(ciphertext):
    return long_to_bytes(pow(int(ciphertext, base=16), d, n)).decode()


def encrypt(message):
    return hex(pow(bytes_to_long(message.encode()), e, n))[2:]
